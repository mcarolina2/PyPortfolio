import streamlit as st
import pandas as pd
import os

# -----------------------------
# Configura√ß√£o da p√°gina
# -----------------------------
st.set_page_config(page_title="An√°lise de Ativos", layout="wide")

# -----------------------------
# Diret√≥rios
# -----------------------------
pasta_dados = "dados"
pasta_graficos = os.path.join(pasta_dados, "graficos")

# -----------------------------
# Ler CSV consolidado
# -----------------------------
consolidado_path = os.path.join(pasta_dados, "precos_consolidados.csv")

if not os.path.exists(consolidado_path):
    st.error("Arquivo consolidado n√£o encontrado. Execute primeiro o etl_extract.py")
    st.stop()

df_consolidado = pd.read_csv(consolidado_path, index_col=0, parse_dates=True)

# -----------------------------
# Criar abas
# -----------------------------
aba_contexto, aba_graficos, aba_dados = st.tabs(["Contextualiza√ß√£o", "Gr√°ficos", "Dados"])

# -----------------------------
# Aba 1: Contextualiza√ß√£o
# -----------------------------
with aba_contexto:
    st.header("üìñ Contextualiza√ß√£o")
    st.markdown("""
                
    Imagine um investidor conservador, avesso ao risco. Ele deseja montar sua carteira de investimentos, mas sua principal preocupa√ß√£o √© minimizar a exposi√ß√£o √†s incertezas do mercado. A quest√£o √©: como encontrar a melhor combina√ß√£o de ativos que ofere√ßa o menor risco poss√≠vel, sem abrir m√£o de um retorno desejado?
 
        ‚û°Ô∏èO desafio: qual √© a melhor propor√ß√£o de cada ativo para alcan√ßar esse equil√≠brio?"
                
    Neste projeto, exploramos esse dilema cl√°ssico da teoria de portf√≥lios. A partir de uma carteira composta por 5 ativos, utilizamos t√©cnicas de otimiza√ß√£o para identificar a aloca√ß√£o que posiciona o investidor no ponto ideal da fronteira eficiente: onde o risco √© minimizado para um n√≠vel de retorno previamente estabelecido.

    Este aplicativo permite analisar ativos financeiros selecionados, utilizando dados hist√≥ricos de fechamento.
    
    **Funcionalidades:**
    - Visualizar gr√°ficos individuais de cada ativo.
    - Comparar todos os ativos em um gr√°fico consolidado.
    - Consultar a tabela com pre√ßos hist√≥ricos.
    
    **Observa√ß√µes:**
    - Os dados s√£o atualizados pelo script `etl_extract.py`.
    - Os gr√°ficos salvos podem ser acessados na pasta `dados/graficos`.
    """)

# -----------------------------
# Aba 2: Gr√°ficos
# -----------------------------
with aba_graficos:
    st.header("üìà Gr√°ficos")
    
    # Sidebar para sele√ß√£o de ativos
    ativos_disponiveis = df_consolidado.columns.tolist()
    ativos_selecionados = st.multiselect(
        "Selecione os ativos:",
        options=ativos_disponiveis,
        default=ativos_disponiveis
    )

    # Exibir gr√°ficos individuais
    for ativo in ativos_selecionados:
        caminho_grafico = os.path.join(pasta_graficos, f"{ativo}.png")
        if os.path.exists(caminho_grafico):
            st.subheader(ativo)
            st.image(caminho_grafico, use_container_width=True)
        else:
            st.warning(f"Gr√°fico do ativo {ativo} n√£o encontrado.")

# -----------------------------
# Aba 3: Dados
# -----------------------------
with aba_dados:
    st.header("üìä Tabela de Pre√ßos Consolidados")
    df_filtrado = df_consolidado[ativos_selecionados]
    st.dataframe(df_filtrado)
